// Generated by CoffeeScript 1.3.1
var AppRouter, app;

app = void 0;

Backbone.View.prototype.navigateAnchor = function(event) {
  event.preventDefault();
  return app.navigate(event.currentTarget.getAttribute("href"), {
    trigger: true
  });
};

Backbone.View.prototype.back = function(event) {
  app.route.removeAllFeatures();
  event.preventDefault();
  return window.history.back();
};

AppRouter = Backbone.Router.extend({
  initialize: function() {
    var drag;
    this.wgs84 = new OpenLayers.Projection("EPSG:4326");
    this.s_mercator = new OpenLayers.Projection("EPSG:900913");
    this.vectors = new OpenLayers.Layer.Vector("Vector layer");
    this.route = new OpenLayers.Layer.Vector("Route layer");
    drag = new OpenLayers.Control.DragFeature(this.vectors, {
      autoActivate: true,
      onComplete: function(event) {
        var sm_coords;
        sm_coords = {
          lon: event.geometry.x,
          lat: event.geometry.y
        };
        return Reittiopas.reverseLocate(toWGS(sm_coords), function(data) {
          return $(event.id).val(data.name);
        });
      }
    });
    this.map = new OpenLayers.Map({
      theme: null,
      controls: [
        drag, new OpenLayers.Control.Attribution(), new OpenLayers.Control.TouchNavigation({
          dragPanOptions: {
            enableKinetcs: true
          }
        }), new OpenLayers.Control.Zoom(), new OpenLayers.Control.DrawFeature(this.vectors, OpenLayers.Handler.Path), new OpenLayers.Control.DrawFeature(this.route, OpenLayers.Handler.Path)
      ],
      layers: [
        new OpenLayers.Layer.OSM("OpenStreetMap", null, {
          transitionEffect: 'resize'
        }), this.vectors, this.route
      ],
      center: new OpenLayers.LonLat(742000, 5861000),
      zoom: 14
    });
    drag.activate();
    this.located = false;
    this.currentPage = null;
    if (!debug) {
      $("head").append("<style type='text/css'>" + collated_stylesheets + "</style>");
    }
    this.firstPage = true;
    return this.pages = {};
  },
  routes: {
    "": "index",
    "route/*splat": "results",
    "input/*splat": "input"
  },
  index: function() {
    if (!this.pages.index) {
      this.pages.index = new IndexView();
      this.insertToDOM(this.pages.index);
    }
    return this.changePage(this.pages.index);
  },
  results: function() {
    if (!this.pages.resultsView) {
      this.pages.resultsView = new ResultsView();
      this.insertToDOM(this.pages.resultsView);
    }
    return this.changePage(this.pages.resultsView);
  },
  input: function() {
    return this.changePage(new InputView());
  },
  resultMap: function(model) {
    if (!this.pages.resultMap) {
      this.pages.resultMap = new ResultMapView({
        model: model
      });
      this.insertToDOM(this.pages.resultMap);
    } else {
      this.pages.resultMap.model = model;
      this.pages.resultMap.showOnMap();
    }
    return this.changePage(this.pages.resultMap);
  },
  insertToDOM: function(page) {
    $(page.el).attr("data-role", "page");
    page.render();
    return $("body").append($(page.el));
  },
  changePage: function(page) {
    var transition;
    transition = $.mobile.defaultPageTransition;
    if (this.firstPage) {
      transition = "none";
      this.firstPage = false;
    }
    console.log(page);
    $.mobile.changePage($(page.el), {
      changeHash: false,
      transition: transition
    });
    if (page.initMap) {
      return page.initMap();
    }
  }
});

tpl.loadTemplates(["searcher", "results", "result-item", "input", "resultmap"], function() {
  var action, route, routes;
  routes = AppRouter.prototype.routes;
  for (route in routes) {
    action = routes[route];
    routes[route + "/"] = action;
  }
  AppRouter.prototype.routes = routes;
  app = new AppRouter();
  return Backbone.history.start();
});
