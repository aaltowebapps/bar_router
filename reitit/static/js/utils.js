// Generated by CoffeeScript 1.3.1
var centerMap, getUrlParam, printStack, toSMercator, toWGS, tpl;

tpl = {
  templates: {},
  loadTemplates: function(names, callback) {
    var loadTemplate,
      _this = this;
    if (!debug) {
      callback();
      return;
    }
    loadTemplate = function(index) {
      var name;
      name = names[index];
      return $.get(static_prefix + "templates/" + name + ".html", function(data) {
        _this.templates[name] = data;
        index++;
        if (index < names.length) {
          return loadTemplate(index);
        } else {
          return callback();
        }
      });
    };
    return loadTemplate(0);
  },
  get: function(name) {
    return this.templates[name];
  }
};

printStack = function() {
  try {
    return printStackExceptionTrigger += 10;
  } catch (error) {
    return console.debug(error.stack);
  }
};

getUrlParam = function(name) {
  var results;
  results = new RegExp('[\\?&]' + name + '=([^&#]*)').exec(window.location.href);
  if (!results) {
    return;
  }
  return decodeURI(results[1]);
};

centerMap = function(coords) {
  console.debug("Centering on " + coords);
  app.map.setCenter(coords, 14);
  return app.located = true;
};

toSMercator = function(coords) {
  return new OpenLayers.LonLat(coords.lon, coords.lat).transform(app.wgs84, app.s_mercator);
};

toWGS = function(coords) {
  return new OpenLayers.LonLat(coords.lon, coords.lat).transform(app.s_mercator, app.wgs84);
};

Array.prototype.clean = function(deleteValue) {
  var index;
  index = this.indexOf(deleteValue);
  while (index !== -1 && this.length > 0) {
    this.splice(index, 1);
  }
  return this;
};
