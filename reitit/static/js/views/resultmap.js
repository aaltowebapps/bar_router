// Generated by CoffeeScript 1.3.1

window.ResultMapView = Backbone.View.extend({
  initialize: function() {
    var res,
      _this = this;
    this.template = _.template(tpl.get('resultmap'));
    res = function(event) {
      return _this.resizeMap(event);
    };
    return $(window).on("resize", res);
  },
  preventDefault: function(event) {
    return event.preventDefault();
  },
  initMap: function() {
    return app.map.render($("#resultMap")[0]);
  },
  resizeMap: function(event) {
    var h;
    if (!this.neededSpace) {
      this.neededSpace = $(this.el).find(".header h1").height() + $(this.el).find(".content").height() + 55;
    }
    h = Math.max($(window).height() - this.neededSpace, 120);
    $("#resultMap").height(h + "px");
    return app.map.updateSize();
  },
  events: {
    "click .back": "back",
    "#currentroute a click": "preventDefault"
  },
  render: function() {
    var item, list;
    $(this.el).html(this.template());
    this.showOnMap();
    list = $(this.el).find("#currentroute");
    item = new ResultsViewItem({
      model: this.model
    }).render().el;
    return list.append(item);
  },
  updateListview: function() {
    var list;
    list = $(this.el).find("#currentroute");
    list.listview('refresh');
    return list.find(".ui-icon").remove();
  },
  showOnMap: function() {
    var _this = this;
    app.route.removeAllFeatures();
    return _.each(this.model.legs, function(leg) {
      var line, points, style;
      points = [];
      if (leg.shape) {
        _.each(leg.shape, function(coord) {
          var sm_coords, wgs_coords;
          wgs_coords = {
            lon: coord.x,
            lat: coord.y
          };
          sm_coords = toSMercator(wgs_coords);
          centerMap(sm_coords, 12);
          return points.push(new OpenLayers.Geometry.Point(sm_coords.lon, sm_coords.lat));
        });
      } else {
        _.each(leg.locs, function(loc) {
          var sm_coords, wgs_coords;
          wgs_coords = {
            lon: loc.coord.x,
            lat: loc.coord.y
          };
          sm_coords = toSMercator(wgs_coords);
          centerMap(sm_coords, 12);
          return points.push(new OpenLayers.Geometry.Point(sm_coords.lon, sm_coords.lat));
        });
      }
      line = new OpenLayers.Geometry.LineString(points);
      style = {
        strokeOpacity: 0.5,
        strokeWidth: 5
      };
      if (leg.type === "bus") {
        style["strokeColor"] = "#0000ff";
      } else if (leg.type === "tram") {
        style["strokeColor"] = "#00ff00";
      } else if (leg.type === "train") {
        style["strokeColor"] = "#ff0000";
      } else if (leg.type === "metro") {
        style["strokeColor"] = "#ff8c00";
      }
      return app.route.addFeatures([new OpenLayers.Feature.Vector(line, null, style)]);
    });
  }
});
