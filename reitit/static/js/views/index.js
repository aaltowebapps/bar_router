// Generated by CoffeeScript 1.3.1

window.IndexView = Backbone.View.extend({
  initialize: function() {
    return this.template = _.template(tpl.get('searcher'));
  },
  initMap: function() {
    app.map.render($("#basicMap")[0]);
    this.resizeMap();
    return $(window).on("resize", this.resizeMap);
  },
  resizeMap: function() {
    var h;
    h = $(window).height() - $("#header h1").height() - $("#content").height() - 55;
    h = Math.max(h, 120);
    $("#basicMap").height(h + "px");
    return app.map.updateSize();
  },
  events: {
    "submit": "submit",
    "change #from": "updateFrom",
    "change #to": "updateTo",
    "blur #from": "centerMapByFocusedInput",
    "blur #to": "centerMapByFocusedInput"
  },
  render: function() {
    var d, time,
      _this = this;
    d = new Date();
    time = {
      hours: d.getHours(),
      minutes: d.getMinutes()
    };
    $(this.el).html(this.template({
      time: time
    }));
    if (navigator.geolocation) {
      (function() {
        var fail, success;
        success = function(position) {
          return _this.geolocate(position);
        };
        fail = function() {
          return _this.dummyGeolocate();
        };
        return navigator.geolocation.getCurrentPosition(success, fail);
      })();
    } else {
      this.dummyGeolocate();
    }
    return this;
  },
  submit: function(event) {
    var from, time, timetype, to;
    event.preventDefault();
    from = encodeURI(event.target[0].value);
    to = encodeURI(event.target[1].value);
    time = encodeURI(event.target[2].value + event.target[3].value);
    console.log(event.target[4].value);
    timetype = encodeURI(event.target[4].value);
    return app.navigate("/route/?from=" + from + "&to=" + to + "&time=" + time + "&timetype=" + timetype, true);
  },
  centerMapByFocusedInput: function(event) {
    var _this = this;
    console.log(event);
    return Reittiopas.locate(event.currentTarget.value, function(data) {
      var center, pos;
      pos = data.coords.split(",");
      center = new OpenLayers.LonLat(pos[0], pos[1]).transform(app.wgs84, app.s_mercator);
      return centerMap(pos[0], pos[1]);
    });
  },
  updateFrom: function(event) {
    this.updatePosition(event.currentTarget.value, "#from", this.currentFromLocation);
  },
  updateTo: function(event) {
    this.updatePosition(event.currentTarget.value, "#to", this.currentToLocation);
  },
  updatePosition: function(searchAddress, targetTextBox, targetDragVector) {
    var _this = this;
    Reittiopas.locate(searchAddress, function(data) {
      var center, pos;
      if (data.details.houseNumber) {
        $(targetTextBox).val("" + data.name + " " + data.details.houseNumber + ", " + data.city);
      } else {
        $(targetTextBox).val("" + data.name + ", " + data.city);
      }
      pos = data.coords.split(",");
      center = new OpenLayers.LonLat(pos[0], pos[1]).transform(app.wgs84, app.s_mercator);
      targetDragVector.move(center);
      return centerMap(pos[0], pos[1]);
    });
  },
  geolocate: function(position) {
    var center, lat, lon;
    lon = position.coords.longitude;
    lat = position.coords.latitude;
    centerMap(lon, lat);
    app.located = true;
    center = new OpenLayers.LonLat(lon, lat).transform(app.wgs84, app.s_mercator);
    Reittiopas.reverseLocate(center.lon, center.lat, function(data) {
      return $("#from").val(data.name);
    });
  },
  dummyGeolocate: function() {
    return this.geolocate({
      coords: {
        longitude: 24.829577200463,
        latititude: 60.183374850576
      }
    });
  },
  initDragPoint: function(location, targetTextBox) {
    var drag, dragpoint, geometryPoint,
      _this = this;
    geometryPoint = new OpenLayers.Geometry.Point(location.lon, location.lat);
    dragpoint = new OpenLayers.Feature.Vector(geometryPoint);
    this.vectors.addFeatures([dragpoint]);
    drag = new OpenLayers.Control.DragFeature(this.vectors, {
      autoActivate: true,
      onComplete: function(event) {
        return Reittiopas.reverseLocate(event.geometry.x, event.geometry.y, function(data) {
          return $(realTargetTextBox).val(data.name);
        });
      }
    });
    this.map.addControl(drag);
    drag.activate();
    return dragpoint;
  }
});
