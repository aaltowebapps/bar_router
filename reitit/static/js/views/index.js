// Generated by CoffeeScript 1.3.1

window.IndexView = Backbone.View.extend({
  initialize: function() {
    var res,
      _this = this;
    this.template = _.template(tpl.get('searcher'));
    res = function(event) {
      return _this.resizeMap(event);
    };
    return $(window).on("resize", res);
  },
  initMap: function() {
    return app.map.render($("#basicMap")[0]);
  },
  resizeMap: function(event) {
    var h;
    if (!this.neededSpace) {
      this.neededSpace = $(this.el).find(".header h1").height() + $(this.el).find(".content").height() + 55;
    }
    h = Math.max($(window).height() - this.neededSpace, 120);
    $("#basicMap").height(h + "px");
    return app.map.updateSize();
  },
  updateLocationFields: function() {
    var event;
    event = {
      currentTarget: {
        value: void 0
      }
    };
    if (window.InputView.prototype.from !== void 0) {
      event.currentTarget.value = window.InputView.prototype.from;
      this.updateFrom(event);
    } else if (window.InputView.prototype.to !== void 0) {
      event.currentTarget.value = window.InputView.prototype.to;
      this.updateTo(event);
    }
    window.InputView.prototype.from = void 0;
    return window.InputView.prototype.to = void 0;
  },
  events: {
    "submit": "submit",
    "change #from": "updateFrom",
    "change #to": "updateTo",
    "focus #from": "onFocusedFrom",
    "focus #to": "onFocusedTo",
    "click #fromFocus": "onCenterFrom",
    "click #toFocus": "onCenterTo"
  },
  render: function() {
    var d, time,
      _this = this;
    d = new Date();
    time = {
      hours: d.getHours(),
      minutes: d.getMinutes()
    };
    if (time.hours < 10) {
      time.hours = "0" + time.hours;
    }
    if (time.minutes < 10) {
      time.minutes = "0" + time.minutes;
    }
    $(this.el).html(this.template({
      time: time
    }));
    Reittiopas.locate("Kamppi", function(data) {
      var pos, sm_coords, wgs_coords;
      if (data.details.houseNumber) {
        $("#to").val("" + data.name + " " + data.details.houseNumber + ", " + data.city);
      } else {
        $("#to").val("" + data.name + ", " + data.city);
      }
      pos = data.coords.split(",");
      wgs_coords = {
        lon: pos[0],
        lat: pos[1]
      };
      sm_coords = toSMercator(wgs_coords);
      return _this.currentToLocation = _this.initDragPoint(sm_coords, "#to");
    });
    if (navigator.geolocation) {
      (function() {
        var fail, success;
        success = function(position) {
          return _this.geolocate(position);
        };
        fail = function() {
          return _this.dummyGeolocate();
        };
        return navigator.geolocation.getCurrentPosition(success, fail);
      })();
    } else {
      this.dummyGeolocate();
    }
    return this;
  },
  submit: function(event) {
    var from, nav, time, timetype, to;
    event.preventDefault();
    from = encodeURI(event.target[0].value);
    to = encodeURI(event.target[1].value);
    time = encodeURI(event.target[2].value + event.target[3].value);
    timetype = encodeURI(event.target[4].value);
    nav = "/route/?from=" + from + "&to=" + to + "&time=" + time;
    if (timetype === "arrival") {
      nav += "&timetype=" + timetype;
    }
    app.navigate(nav);
    return app.results(true);
  },
  onFocusedFrom: function(event) {
    window.InputView.prototype.from = event.currentTarget.value;
    return app.navigate("/input/?target=from", true);
  },
  onFocusedTo: function(event) {
    window.InputView.prototype.to = event.currentTarget.value;
    return app.navigate("/input/?target=to", true);
  },
  onCenterFrom: function(event) {
    var coords;
    coords = new OpenLayers.LonLat(this.currentFromLocation.geometry.x, this.currentFromLocation.geometry.y);
    return centerMap(coords);
  },
  onCenterTo: function(event) {
    var coords;
    coords = new OpenLayers.LonLat(this.currentToLocation.geometry.x, this.currentToLocation.geometry.y);
    return centerMap(coords);
  },
  updateFrom: function(event) {
    this.updatePosition(event.currentTarget.value, "#from", this.currentFromLocation);
  },
  updateTo: function(event) {
    this.updatePosition(event.currentTarget.value, "#to", this.currentToLocation);
  },
  updatePosition: function(searchAddress, targetTextBox, targetDragVector) {
    var _this = this;
    Reittiopas.locate(searchAddress, function(data) {
      var pos, sm_coords, wgs_coords;
      if (data.details.houseNumber) {
        $(targetTextBox).val("" + data.name + " " + data.details.houseNumber + ", " + data.city);
      } else {
        $(targetTextBox).val("" + data.name + ", " + data.city);
      }
      pos = data.coords.split(",");
      wgs_coords = {
        lon: pos[0],
        lat: pos[1]
      };
      sm_coords = toSMercator(wgs_coords);
      targetDragVector.move(sm_coords);
      return centerMap(sm_coords);
    });
  },
  geolocate: function(position) {
    var sm_coords, wgs_coords;
    wgs_coords = {
      lon: position.coords.longitude,
      lat: position.coords.latitude
    };
    sm_coords = toSMercator(wgs_coords);
    centerMap(sm_coords);
    app.located = true;
    this.currentFromLocation = this.initDragPoint(sm_coords, "#from");
    Reittiopas.reverseLocate(wgs_coords, function(data) {
      return $("#from").val(data.name);
    });
  },
  dummyGeolocate: function() {
    return this.geolocate({
      coords: {
        longitude: 24.829577200463,
        latititude: 60.183374850576
      }
    });
  },
  initDragPoint: function(location, targetTextBox) {
    var dragpoint, geometryPoint, style;
    geometryPoint = new OpenLayers.Geometry.Point(location.lon, location.lat);
    style = {
      fillColor: "#ee0000",
      fillOpacity: 0.4,
      strokeColor: "#ff0000",
      pointRadius: 6
    };
    dragpoint = new OpenLayers.Feature.Vector(geometryPoint, null, style);
    dragpoint.id = targetTextBox;
    app.vectors.addFeatures([dragpoint]);
    return dragpoint;
  }
});
