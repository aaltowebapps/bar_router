// Generated by CoffeeScript 1.3.1

window.InputView = Backbone.View.extend({
  transition: "pop",
  events: {
    "click .back": "back",
    "submit": "submit",
    "change #input": "onInputChanged",
    "click #favicon": "onFavIconClick",
    "click .favitem": "onFavItemClick"
  },
  initialize: function() {
    this.template = _.template(tpl.get('input'));
    this.favorites = new Favorites();
    this.favorites.bind('add', this.addOne, this);
    this.favorites.bind('remove', this.removeOne, this);
    return this.favorites.bind('reset', this.addAll, this);
  },
  render: function() {
    this.updateParams();
    $(this.el).html(this.template({
      currentInput: this.value
    }));
    this.favlist = $(this.el).find("#favlist");
    this.onInputChanged(null);
    return this;
  },
  updateParams: function() {
    this.target = getUrlParam("target");
    this.value = getUrlParam("value");
    return $(this.el).find("#input").val(this.value);
  },
  updateListview: function() {
    this.favorites.fetch();
    return this.onInputChanged();
  },
  submit: function(event) {
    var call;
    event.preventDefault();
    app.transition = this.transition;
    app.historyBack = true;
    app.navigate("/");
    call = {};
    call["" + this.target] = $(this.el).find("#input")[0].value;
    app.index(call);
  },
  addOne: function(item) {
    var address;
    address = item.get("address");
    if (address !== void 0 && address !== "") {
      item = new FavoriteItemView({
        model: item
      }).render().el;
      this.favlist.append(item);
      this.refreshListView();
    }
  },
  addAll: function() {
    var _this = this;
    this.favlist.empty();
    _.each(this.favorites.models, function(item, index) {
      return _this.addOne(item);
    });
  },
  removeOne: function(item) {
    this.favlist.empty();
    return this.addAll();
  },
  onInputChanged: function(event) {
    var favIcon, inputValue, matches;
    inputValue = $(this.el).find("#input")[0].value;
    favIcon = $(this.el).find("#favicon")[0];
    matches = this.favorites.byAddress(inputValue);
    if (matches.length > 0) {
      return favIcon.src = favIcon.src.replace("off", "on");
    } else {
      return favIcon.src = favIcon.src.replace("on", "off");
    }
  },
  onFavIconClick: function(event) {
    var address, el, enabled,
      _this = this;
    el = $(this.el).find("#favicon")[0];
    enabled = el.src.indexOf("off") !== -1;
    if (enabled) {
      el.src = el.src.replace("off", "on");
    } else {
      el.src = el.src.replace("on", "off");
    }
    address = $("#input")[0].value;
    console.log(address);
    if (enabled) {
      Reittiopas.locate(address, function(data) {
        var fav, val;
        if (data.details.houseNumber) {
          val = "" + data.name + " " + data.details.houseNumber + ", " + data.city;
        } else {
          val = "" + data.name + ", " + data.city;
        }
        $("#input").val(val);
        if (!_this.favorites.contains({
          address: val
        })) {
          return fav = _this.favorites.create({
            address: val
          });
        }
      });
    } else {
      _.each(this.favorites.byAddress(address), function(fav) {
        return fav.destroy();
      });
    }
  },
  onFavItemClick: function(event) {
    return $(this.el).find("#input")[0].value = event.currentTarget.innerHTML;
  },
  refreshListView: function() {
    try {
      return this.favlist.listview("refresh");
    } catch (error) {
      return console.debug(error);
    }
  }
});

window.FavoriteItemView = Backbone.View.extend({
  tagname: "li",
  initialize: function() {
    return this.template = _.template(tpl.get('favorite-item'));
  },
  render: function() {
    $(this.el).html(this.template({
      address: this.model.get("address"),
      index: this.options.index
    }));
    return this;
  }
});
